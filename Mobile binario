#include <stdio.h>
#include <stdlib.h>

typedef struct arv{
  int valor;
  struct arv* esq;
  struct arv* dir;
}Arvore;



Arvore* criarArvoreBinaria(){
  return NULL;
}

void imprimirArvore(Arvore* f){
  if(f != NULL){
    imprimirArvore(f->esq);
    printf("%d\n\t\t", f->valor);
    imprimirArvore(f->dir);
  }
}

Arvore* buscarNaArvore(Arvore* r, int v){
  if(r == NULL)
    return NULL;
  else if(r->valor > v)
    return buscarNaArvore(r->esq,v);
  else if(r->valor < v)
    return buscarNaArvore(r->dir,v);
  else
    return r;
}

Arvore* inserirNaArvore(Arvore* f,int v){
	printf("v = %d",f->esq);
  if(f == NULL){
    f = (Arvore*)malloc(sizeof(Arvore));
    f->valor = v;
    f->esq = f->dir = NULL;
  }
  else if(v < f->valor){
    f->esq = inserirNaArvore(f->esq,v);
	printf("\n\t\tInserido no lado esquerdo");
  }else{
    f->dir = inserirNaArvore(f->dir,v);
	printf("\n\t\tInserindo no lado direito");
  }
  return f;
}


/*
Arvore* removerElemento(Arvore* raiz, int info) {
	Arvore* filho, n_raiz;

	if (!raiz) return NULL;

	if (raiz->info == info) {
		if (raiz->direita) {
			n_raiz = filho = raiz->direita;

			while(filho->esquerda)
				filho = filho->esquerda;

			filho->esquerda = raiz->esquerda;

			free (raiz);
			return n_raiz;

		} else {
			n_raiz = raiz->esquerda;
			free (raiz);
			return n_raiz;
		}

	} else if (info > raiz->info)
		raiz->direita = deletar(raiz->direita, info);
	else
		raiz->esquerda = deletar(raiz->esquerda, info);

	return raiz;
}
*/

void gravarArvore(Arvore* arvore){
   FILE *arquivo;
   arquivo = fopen("Arvore.txt","w");
   if(arvore != NULL){
      fwrite(&arvore->valor, sizeof(Arvore), 1, arquivo);
   }
   fclose(arquivo);
}
 
Arvore* carregarStore(Arvore* Arv){
   FILE *arquivo;
   arquivo = fopen("aplicativos.txt","r");
   rewind(arquivo);
   int i = 0;
   
   if(Arv == NULL){
      Arv = (Arvore*) malloc(sizeof(Arvore));
      Arv->esq = NULL;
      Arv->dir = NULL;  
   }
   fread(&Arv->valor, sizeof(Arvore), 1, arquivo);
       
   fclose(arquivo);
   return Arv;
}
 
 void loja(Arvore* store,Arvore* appsInstalados){
	 int busca,valor;
	 imprimirArvore(store);
	 while(valor > 0){
				printf("\n\t\tDigite o valor para inserir:\n\t\t");
				scanf("%d",&valor);
				busca = buscarNaArvore(store,valor);
				if(busca == valor)
				{
					printf("Valor encontrado\n\t\t");				
					appsInstalados = inserirNaArvore(appsInstalados,busca);
				}else{
					printf("Valor nao encontrado\n\t\t");
				}
			}
 }
 
  
void menu(Arvore* store,Arvore* appsInstalados,Arvore* executando){
		int escolha;
		printf("\n\t\t===MENU===\n\t\t1-Store\n\t\t2-Apps Instalados\n\t\t3-Executando");
		scanf("%d",&escolha);
		switch(escolha){
			case 1:
			loja(store,appsInstalados);
			menu(store,appsInstalados,executando);		
			case 2:
				imprimirArvore(appsInstalados);
				menu(store,appsInstalados,executando);
				break;
			case 3:
				printf("\n\t\tImprimindo arvore...:\n\t\t");
				imprimirArvore(appsInstalados);
				break;
			case 4:
				printf("\n\t\tGravando arquivos...");
				gravarArvore(executando);
		}
}


int main(){
	Arvore* store;
	Arvore* aplicativosInstalados;
	Arvore* aplicativoExecutando;
	store = criarArvoreBinaria();
	aplicativosInstalados = criarArvoreBinaria();
	aplicativoExecutando = criarArvoreBinaria();
	store = carregarStore(store);
  	menu(store,aplicativosInstalados,aplicativoExecutando);
  return 0;
}
