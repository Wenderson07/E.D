#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <windows.h>
#include <conio.h>
#include <time.h>

#define T 20
   
   /*
   Resposta Tarefa ED:
1. A inserção deve ser feita ordenada, seu programa insere e depois ordena;
2. Muito criativo as mensangens dos aplicativos(^-^) ;
3. Deveria ter a numeração dos aplicativos;
4. Deveria ter uma menu que liste os aplicativos em execução;
5. Não foi possivel desinstalar nenhum aplicativo;

O programa foi bem feito e não possue falhas graves, porem é preciso prestar mais antenção ao que o professor pede.  
   

   /*
void inserir_ordenado(App);
void ordenar();
void ordenar_instalados();
void instalar(int);
void remover(int);
int StoreEd();
void MeusAppsED();
int carregar_dados();
void gotoxy(int,int);
void executar(int);
void display();
*/
   
typedef struct 
{
	int tam;
	char nome[30];
}App;
App apps[T];
App appsInstalados[T];
App appRunED[T];

int count=0;


void inserir_ordenado(App instalando){
	App aux;
	int i,j;
	for (i = 0; i < T; i++) {
		
	aux = appsInstalados[i];
	for(j =i +1;j<T;j++){
			  if(appsInstalados[j].tam < aux.tam && appsInstalados[j].tam !=0){
				  appsInstalados[i] = appsInstalados[j];
				  appsInstalados[j] = aux;
				  aux = appsInstalados[i];			  
			  }		

	}
	}	
}
	


void ordenar(){    

App aux;
  int i, j,k;
  	

	
  for(i = 1; i <= T; i++){ 
    j = i;     
    while((j != 0) && (apps[j].tam > apps[j-1].tam )){
    	
    	aux =  apps[j-1];
    	 apps[j-1]= apps[j];
    	 apps[j] = aux;
    	 j--;
	}
	}
	for(j=0,k=19;j<10;j++,k--){
		aux=apps[j];
		apps[j]=apps[k];
		apps[k]=aux;
	}	
}

void ordenar_instalados(){
	App aux;
  int i, j,k;
	for(i = 1; i <= T; i++){ 
		j = i;     
	    while((j != 0) && (appsInstalados[j].tam > appsInstalados[j-1].tam )){
	    	aux =  appsInstalados[j-1];
	    	appsInstalados[j-1]= apps[j];
	    	appsInstalados[j] = aux;
	    	j--;
		}
		for(j=0,k=19;j<10;j++,k--){
			aux=appsInstalados[j];
			appsInstalados[j]=appsInstalados[k];
			appsInstalados[k]=aux;}
		}
}	

void instalar(int indice){
	int resp=0,a,i,j=0,x=0;
	system("cls");
	
	for(i=0;i<20;i++){											//Verificar se o aplicativo esta instalado
		a=strcmp(apps[indice].nome,appsInstalados[i].nome);
	if(a==0){
		x++;}
		}
	
	if(x<=0){
		appsInstalados[count]=apps[indice];
		inserir_ordenado(appsInstalados[count]);																//Caso Negativo	  		
		count++;				
		printf("\t\tAplicativo %s instalado com sucesso\n\n\t\tDeseja instalar outro aplicativo ?\n\t\t1-Voltar para store ou 2-Voltar para Home\n\t\t",apps[indice].nome);}	
																
	else{														//Caso Positivo
		printf("\t\tAplicativo ja esta instalado\n\n\t\t1-Digitar outro codigo 2-Voltar ao menu\n\t\t");		
	}
	
	scanf("%d",&resp);
	while((resp !=1) && (resp != 2)){				//Voltar para store ou menu
		  scanf("%d",&resp);	
	}
	if(resp ==1){
		StoreED();
	}
	else
	{
		display();
	} 
	
	
}

void remover(int indice){ // Fazer
	   int i,j,resp;
	   printf("O aplicativo %s, sera excluido\n1-Continuar\t2-Cancelar",appsInstalados[indice].nome);
	   scanf("%d",&resp);
	   if (resp ==1){
	   for(i=0;i<20;i++){
		   if(appsInstalados[i].tam == appsInstalados[indice].tam){
		   	   appsInstalados[i].tam = -1;
		   	   strcpy(appsInstalados[i].nome,"");
		   }
	   }
	      ordenar();
	   }
	   else
	   {
		   MeusAppsED();
	   }
}

void StoreED(){
	SetConsoleTitle("STORE ED");
	system("cls");
	int i,j,resposta;
	printf("\t\t__________________StoreED____________________________\n\t\t|");
	for (i=0;i<T;i++){
	printf("|Cod:%d|\n\t\tNome:%s\n\t\tTamanho:%d\tQntd de downloads Hoje:%d\n\n\t\t",i+1,apps[i].nome,apps[i].tam,rand());
}

	printf("Digite o codigo do aplicativo a ser instalado: ");
	scanf("%d",&resposta);
	while((resposta <=0) || (resposta >20)){
	printf("\t\tDigite um codigo valido:\n");
	scanf("%d",&resposta);
	}

	instalar(resposta -1);
}
		
void MeusAppsED(){
	int i,resp=-1,resp2=-1; //resp 1 pega o indice , resp 2-escolha do user
	system("cls");
	SetConsoleTitle("\t\tMEU APPS ED");
	if(appsInstalados[0].tam == 0){
		
		printf("\n\t\tNenhum aplicativo foi instalado!\n\n\t\t");
	}
	else
	{
		printf("\t\tLista de Aplicativos instalados:\n");
	
	for(i=0;i<20;i++){
		printf("%s\n",appsInstalados[i].nome);
		
	}
	printf("\t\tDigite o codigo do aplicativo  ou digite 0 para sair\n");
	scanf("%d",&resp);\
	while (resp <=0 && resp > 10){
	scanf("%d",&resp);}	
	if(resp == 0){
		display();
	}
	else
	{
		
		printf("%s\n\t\t1-Executar  2-Fechar  3-Desinstalar\n",appsInstalados[resp -1].nome);
		scanf("%d",&resp2);
		if (resp2 ==1)
		executar(resp-1);
		if(resp2 == 2)	
		display();
		if(resp ==3);
		remover(resp-1);}
			

}	
system("pause");	
}



int carregar_dados(){
	int i=0,j=0,parada1,parada2;
	FILE *leitura_apps;
	FILE *leitura_appsInstalados;
 	 leitura_apps = fopen("aplicativos.txt","r");
 	 
	if(leitura_apps== NULL){
		printf("Arquivo ""aplicativos.txt"" não foi carregado ou não existe");
		}
	else
	{
		while(parada1 != -1)
		{		  		
		((parada1 =fscanf(leitura_apps,"%s %d\n",&apps[i].nome, &apps[i].tam))!=EOF);
		i++;} 
		 }
	
	fclose(leitura_apps);
	

 	leitura_appsInstalados = fopen("aplicativos_instalados.txt","r");
 	if(leitura_appsInstalados== NULL){
		return;}
	else
	{
		while(parada2 != -1){
		((parada2 =fscanf(leitura_appsInstalados,"%s %d\n",&appsInstalados[j].nome,&appsInstalados[j].tam))!=EOF);
		if(parada1 != -1)
		count++;
		j++;
		}
		
	}  
	
}

/*
int consultar(){
	int resposta,i;
	printf("1-Consultar\n2-Organizar\n");
	scanf("%d",&resposta);
	switch(resposta)
	{
	case 1:
	;
		break;
	default:
		ordenar();
		break;
	}
	for(i=0;i<T;i++){
		printf("%d\n",apps[i]);
	}
}
*/

//Função gotoxy
void gotoxy(int x, int y)
{
  COORD coordenadas;
  coordenadas.X = x;
  coordenadas.Y = y;
  SetConsoleCursorPosition(GetStdHandle(STD_OUTPUT_HANDLE), coordenadas);
}

void display(){
		SetConsoleTitle("MOBILE ED");
	system("cls");
	int i=0,j=1,k=2,l=1; //variaveis para o display
	int resp; 
		printf("\t\tÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ");//codigo do display
		printf("\n\t\t\xB0 StoreED   Meus Apps   RunED\n\t\t\xB0"); //\t\t\xB0 == barras no inicio
		for(l=1;l<4;l++){		
		printf("\n\t\t\xB0\n\t\t\xB0\n\t\t\xB0 %.5s     %.5s       %.5s",appsInstalados[i].nome,appsInstalados[j].nome,appsInstalados[k].nome);
		i+=3;
		j+=3;
		k+=3;}	
		for(l = 1;l<12;l++){
		gotoxy(46,l); //46 = coluna , l = liha, codigo para barra na direita
		printf("\xB0");
			}			
	   	printf("\n\t\tÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ");
		printf("\n\t\tAPLICATIVOS EM SEGUNDO PLANO: \n\t\t1 - Store\n\t\t2 - Meus Apps\n\t\t3-9 Aplicativos instalados\n\t\t0-Desligar\n\t\t");
	scanf("%d",&resp);
	if (resp ==1){
		StoreED();
	}
	else if(resp ==2 ){
		MeusAppsED();
	}
	else if(resp == 3){
		running();
	}
	else if(resp >=4 && resp <=12){
		if(appsInstalados[resp - 3].nome == -1)
		resp =-1;
		while(resp <=0 && resp >12 && appsInstalados[resp - 4].nome == -1)
		{
		scanf("%d",&resp);	
		printf("Codigo de app errado, digite um dos codigos entre os aplicativos ja existentes:\n");
		}
		executar(resp -4);				
	}
	else if(resp ==  0) {
		printf("\t\tMobileED desligando....\n\t\t");
		system("pause");
		exit (0);
		}
	else{
		printf("\t\tNumero invalido, digite outro:");
	}	
	return main();
}



void executar(int indice){
	char local[50];
	int i,count1=0,resp=1,resp_tax=1,resp_out=0;
	for(i=0;i<T;i++){
		if(appsInstalados[indice].nome[0] == appsInstalados[i].nome[0] || appsInstalados[0].tam== -1){
			count1++;
			}			}
		if(count1==20){
			system("cls");
			printf("Nao tem nenhum aplicativo instalado\nInstale um a partir da store\n");
			system("pause");
			display();
		}
	else
	{   	
	SetConsoleTitle("Rum ED");
	system("cls");
	for(i =0;i<T;i++){
		if(appRunED[i].nome == -1){
			appRunED[i] = appsInstalados[indice];
		}
	}
	
	
	switch(appsInstalados[indice].nome[0])
		{
		case 'W':
			printf("\n===WhatsApp===\n\tInfelizmente voce nao tem nenhum contato adicionado\n\n");
			
			
			system("pause");
			break;
		case 'F':
			printf("\n===Facebook===\n\tOops, something went wrong. Please try again later\n\n");
			system("pause");
			break;
		case 'I':
			printf("\n===Intagram===\n");
			system("pause");
			break;
		case 'U':
			printf("\n===UBER===\n\nInfelizmente o uber ainda nao atua em sua regiao !\n\n");
			system("pause");
			break;
		case '9':
			printf("\n===99 TAXI===\n");
			while(resp_tax !=2)
			{
			printf("Digite o lugar de saida: ");
			scanf("%s",&local);
			printf("Digite o lugar de destino: ");
			scanf("%s",&local);
			printf("O valor da corrida e de R$%2.d\nInfelizmente nao existe motoristas disponiveis nesse horario\n1-Calcular outra corrida 2-Sair\n\n",rand()%100);
			scanf("%d",&resp_tax);}
			break;
		case 'D':
			printf("\n===DropBox===\n\tAplicativo em desenvolvimento\n\n");
			system("pause");
			break;
		case 'M':
			printf("\n===Messenger===\n\tAplicativo em desenvolvimento, volte novamente proximo mes\n\t");
			break;
		case 'T': 
			printf("\nTeste Auditivo\nExecutando o teste: \a\a\a\a\a\a\a\a\a\a\a\nDeseja executar novamente ? 1-sim 2-Nao\n");
			while(resp !=2)
			{
				scanf("%d",&resp);
				if(resp ==1){
				printf("\a\a\a\a\a\a\a\a\nDeseja executar novamente ? 1-sim 2-Nao\n");
				}
				
				
			} ;
			display();
			break;
		case '4':
			printf("\n===4Shared===\nAplicativo derrubado temporariamente devido a situacoes judiciais\n");
			system("pause");
			break;
		case 'S':
			printf("\n===Sigaa===\nErro Inesperado no sistema,uma mensagem foi enviada para o nti\n\n");
			system("pause");
			break;
		case 'H':
			printf("\n===Horario===\n");
			const time_t timer = time(NULL);
			printf("Horario atual:  %s\n\n", ctime(&timer));
				system("pause");
			break;
		case 'O':
			printf("\n===Outlook===\nCaixa de Entrada(1)\n1-Abrir email ou 2-Home\n");
			while((resp_out !=1) && (resp_out != 2))
			{
				scanf("%d",&resp_out);
				printf("1-Abrir email ou 2-Home\n\n");
			}
			if (resp_out ==1){
				printf("\n\tBem Vindo ao Outlook,Use o Outlook para acessar email, contatos, calendarios e tarefas de praticamente qualquer lugar. Voce so precisa de acesso a Internet.\n");
				}
				while(resp_out != 2){
				printf("2-Home\n");
				scanf("%d",&resp_out);}
			
			if(resp == 2){
				display();
			}
		case 'N':
			printf("\n===Netflix===\n\tNao foi possivel conectar ao serviço Netflix\n\t(Sorry, we were unable to reach the Netflix service)\n\n");
			system("pause");
			break;
		case'B':
			printf("\n===Banco do Brasil===\n\Saldo na conta : R$ 00.00\n\n");
			system("pause");
			break;
		case 'A':
			printf("\n===Avast===\n\tPossiveis virus detectados : 0\n\n");
			system("pause");
			break;
		default:
			break;

		}
	}
	}
	
	
void running(){
	system("cls");
	int i;
	printf("\t\tAplicativos ativos:");
	for(i=0;i>10;i++){
		if(appRunED[i].nome != -1){
		printf("%d - %s",appRunED[i].nome);
	}
}

}


int main(){
	SetConsoleTitle("MOBILE ED");
	system("color 0a");
	carregar_dados();
	ordenar();
	display();
}
